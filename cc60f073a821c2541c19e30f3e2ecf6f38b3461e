{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f9cc7dc1_6a7a4ecb",
        "filename": "include/erase.hpp",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "Let\u0027s include this in the prior CL since these are required from the start (missed on the first review)",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 26,
        "endChar": 2
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fcb8a925_cbe7b046",
        "filename": "include/erase.hpp",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "A rebase should fix that.",
      "parentUuid": "f9cc7dc1_6a7a4ecb",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 26,
        "endChar": 2
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe8e51f0_9d614ba9",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 13,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "If this is supposed to be an interface class, would prefer all methods be pure virtual",
      "range": {
        "startLine": 13,
        "startChar": 6,
        "endLine": 13,
        "endChar": 14
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f4a8376_f4f227a3",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 13,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "Santize provides a base class for SanitizeImpl and mockSanitize. Both inherited classes can use the same doSanitize method. But they have different wrapperIOCTL methods.\nThis allows for testing. \n\nLet me know if you have a different design in mind.",
      "parentUuid": "fe8e51f0_9d614ba9",
      "range": {
        "startLine": 13,
        "startChar": 6,
        "endLine": 13,
        "endChar": 14
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94abc283_15930cc5",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 13,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-10T00:43:56Z",
      "side": 1,
      "message": "Ah yes, similar to the suggestion I gave to John Wedig for the other CL - the wrapper should be a separate class that you pass to Sanitize here as an interface (and you can mock the wrapper).\n\nhttps://gerrit.openbmc-project.xyz/c/openbmc/estoraged/+/48972 - please take a look at how eStoraged and filesystemInterface is structured.\n\nHow I imagine this would be designed and tested would be - Sanitize is no longer an interface + implementation class (we could, if you think you\u0027ll need to mock the Sanitize class in the future) and we\u0027ll have IOCTL as an interface + implementation class. That way, in your test you\u0027ll create the actual Sanitize class but pass in the mock IOCTL wrapper.\n\nIn this case since it\u0027s only a single API, it does feel like a bit of an overkill.. so I\u0027m open to other suggestions / opinions.",
      "parentUuid": "6f4a8376_f4f227a3",
      "range": {
        "startLine": 13,
        "startChar": 6,
        "endLine": 13,
        "endChar": 14
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "332f26dd_08a8d39a",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 13,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-10T23:20:56Z",
      "side": 1,
      "message": "This is a inheritance vs composition question. I was mocking using inheritance to override the ioctl member function. I just just switch to having a ioctl object owned by sanitize (composition), that can be mocked. \n \nI don\u0027t have a strong preference",
      "parentUuid": "94abc283_15930cc5",
      "range": {
        "startLine": 13,
        "startChar": 6,
        "endLine": 13,
        "endChar": 14
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6e25e3f_b99ecaa5",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 13,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-01-31T18:57:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "332f26dd_08a8d39a",
      "range": {
        "startLine": 13,
        "startChar": 6,
        "endLine": 13,
        "endChar": 14
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aafa7ff3_e880fe9d",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 19,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "Are we going to implement anything specific in the Sanitize destructor? I don\u0027t think we need this if the base class declares the destructor virtual default",
      "range": {
        "startLine": 18,
        "startChar": 3,
        "endLine": 19,
        "endChar": 6
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40a04e7f_377f3fd7",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 19,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aafa7ff3_e880fe9d",
      "range": {
        "startLine": 18,
        "startChar": 3,
        "endLine": 19,
        "endChar": 6
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a621c98_92216875",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 24,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "If an interface class (and thus pure virutal), we shouldn\u0027t have private class, perhaps you meant protected here?",
      "range": {
        "startLine": 21,
        "startChar": 2,
        "endLine": 24,
        "endChar": 58
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1da3edeb_af96599b",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 24,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a621c98_92216875",
      "range": {
        "startLine": 21,
        "startChar": 2,
        "endLine": 24,
        "endChar": 58
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e881672_9a4bc4c4",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "minor nit: prefer \"Impl\" for \"Implementation\" - I\u0027m guess this that\u0027s what this is?",
      "range": {
        "startLine": 27,
        "startChar": 6,
        "endLine": 27,
        "endChar": 17
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c5152cf_e2516367",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e881672_9a4bc4c4",
      "range": {
        "startLine": 27,
        "startChar": 6,
        "endLine": 27,
        "endChar": 17
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a027e530_9b231e1a",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "Include string_view in #include above",
      "range": {
        "startLine": 30,
        "startChar": 21,
        "endLine": 30,
        "endChar": 32
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e936df54_404beea3",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a027e530_9b231e1a",
      "range": {
        "startLine": 30,
        "startChar": 21,
        "endLine": 30,
        "endChar": 32
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73b4cf42_4983ccb8",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "Same here",
      "range": {
        "startLine": 31,
        "startChar": 5,
        "endLine": 31,
        "endChar": 16
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e85ef54_0579af70",
        "filename": "include/sanitize.hpp",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73b4cf42_4983ccb8",
      "range": {
        "startLine": 31,
        "startChar": 5,
        "endLine": 31,
        "endChar": 16
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2f549d4_a4a0eb32",
        "filename": "src/erase/sanitize.cpp",
        "patchSetId": 8
      },
      "lineNbr": 11,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "IWYU, need to include string, and string_view includes",
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4641d6a_d29942e5",
        "filename": "src/erase/sanitize.cpp",
        "patchSetId": 8
      },
      "lineNbr": 11,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2f549d4_a4a0eb32",
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30825412_d4148bb4",
        "filename": "src/erase/sanitize.cpp",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "stylistic nit: prefer having the constructor declared in the header",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 37,
        "endChar": 2
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e56d9d1_8b6b0b23",
        "filename": "src/erase/sanitize.cpp",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30825412_d4148bb4",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 37,
        "endChar": 2
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a596a3c0_466982d1",
        "filename": "src/erase/sanitize.cpp",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "question: is this needed? If they should always start with 0s, maybe we should set the struct members to all be set to 0 in struct declaration?",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 53,
        "endChar": 37
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1aea218a_3706b0a2",
        "filename": "src/erase/sanitize.cpp",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "The struct has 16 elements in it, and ideally if new fields are added I don\u0027t want to have to update this code. \n\nMaybe initializing the struct to default ( \u003d{}) will be more clear. Let me know if you would prefer the longer explicit initialization for each field, and I will switch to it.",
      "parentUuid": "a596a3c0_466982d1",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 53,
        "endChar": 37
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "688c3270_6b7e52b6",
        "filename": "src/erase/sanitize.cpp",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-10T00:43:56Z",
      "side": 1,
      "message": "Yup, this is cleaner.\n\nWhen I suggested setting the struct members to 0 in struct declaration, I meant in declaration of the struct - but just realized mmc_ioc_cmd is not something we can touch. This looks good now.",
      "parentUuid": "1aea218a_3706b0a2",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 53,
        "endChar": 37
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50385c4d_7892f29d",
        "filename": "src/erase/sanitize.cpp",
        "patchSetId": 8
      },
      "lineNbr": 73,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "Should this be error?",
      "range": {
        "startLine": 73,
        "startChar": 9,
        "endLine": 73,
        "endChar": 14
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d53a12b4_678a1858",
        "filename": "src/erase/sanitize.cpp",
        "patchSetId": 8
      },
      "lineNbr": 73,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "it should be info. thanks for the catch",
      "parentUuid": "50385c4d_7892f29d",
      "range": {
        "startLine": 73,
        "startChar": 9,
        "endLine": 73,
        "endChar": 14
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f69e7ea4_4800646d",
        "filename": "src/erase/sanitize.cpp",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "stylistic nit: prefer having the constructor declared in the header",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 78,
        "endChar": 2
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35c0543b_db070e20",
        "filename": "src/erase/sanitize.cpp",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f69e7ea4_4800646d",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 78,
        "endChar": 2
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84fb81c3_746ac2f2",
        "filename": "src/test/erase/meson.build",
        "patchSetId": 8
      },
      "lineNbr": 19,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "Seems like we already have the test meson.build one directory up - should we just include \"sanitize\" to the existing meson instead?\n\nOtherwise, you could use subdirectory and append to tests in each subdirectories if you prefer.\n\nEdit: Looking below, seems like you added it already? I think we can delete this then right?",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 19
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "450204fe_ce2c02d2",
        "filename": "src/test/erase/meson.build",
        "patchSetId": 8
      },
      "lineNbr": 19,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "yep, this was a merge based oversight on my part",
      "parentUuid": "84fb81c3_746ac2f2",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 19
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b1e21d7_6ac759a8",
        "filename": "src/test/erase/sanitize_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 29,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "There should be \"override\" somewhere here",
      "range": {
        "startLine": 27,
        "startChar": 16,
        "endLine": 29,
        "endChar": 0
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c85342c_d500e502",
        "filename": "src/test/erase/sanitize_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 29,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b1e21d7_6ac759a8",
      "range": {
        "startLine": 27,
        "startChar": 16,
        "endLine": 29,
        "endChar": 0
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6315375_d439d6c2",
        "filename": "src/test/erase/sanitize_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "Should we have more test coverages?\n\nCould we be a little more descriptive in the test? or add a comment for test description.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 31,
        "endChar": 23
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3178bb9f_9e66c3f3",
        "filename": "src/test/erase/sanitize_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "let me know if you think I need more cases",
      "parentUuid": "b6315375_d439d6c2",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 31,
        "endChar": 23
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b57973b2_5732c127",
        "filename": "src/test/erase/sanitize_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-07T19:33:31Z",
      "side": 1,
      "message": "nit: constexpr std::string_view",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 15
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66335ffe_bc3fec42",
        "filename": "src/test/erase/sanitize_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-08T04:13:09Z",
      "side": 1,
      "message": "is that the same as putting as MockSanitize goodSanitize(\"/dev/null\"); ?\n\ndone",
      "parentUuid": "b57973b2_5732c127",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 15
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "029cf48f_9bc80e89",
        "filename": "src/test/erase/sanitize_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-10T00:43:56Z",
      "side": 1,
      "message": "Oh yeah, that\u0027s probably better. since we don\u0027t have to declare a variable we won\u0027t use besides the initialization here.",
      "parentUuid": "66335ffe_bc3fec42",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 15
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4dc4d5c_e5b52975",
        "filename": "src/test/erase/sanitize_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-12-10T23:20:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "029cf48f_9bc80e89",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 15
      },
      "revId": "cc60f073a821c2541c19e30f3e2ecf6f38b3461e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}