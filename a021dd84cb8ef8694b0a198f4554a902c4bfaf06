{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e6413629_bd34dd2c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-01-12T01:21:37Z",
      "side": 1,
      "message": "to",
      "range": {
        "startLine": 10,
        "startChar": 8,
        "endLine": 10,
        "endChar": 11
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ede6918d_ac5be7fb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-01-12T04:22:29Z",
      "side": 1,
      "message": "Oh wow, this operation takes 6 minutes? I wonder if we should chunk / make it asynchronous.\n\nWhat happens if you were to run this busctl call in the background with \u0026 and then call another eStoraged command? (most likely timeout).\n\nI noticed that you ran this command with timeout - do you plan to enforce calling this api with a long default timeout?",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 17
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57776604_f06bfbfa",
        "filename": "include/zero.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-01-12T01:21:37Z",
      "side": 1,
      "message": "Should the ManagedFd object be a member of this class? You could create it in the constructor, since the caller passes in the device path anyway.\n\nOf course, changing this would affect your unit tests. You could have the tests just write to a test file.",
      "range": {
        "startLine": 26,
        "startChar": 39,
        "endLine": 26,
        "endChar": 48
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff8c1fcb_3079bd16",
        "filename": "include/zero.hpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-01-13T01:10:02Z",
      "side": 1,
      "message": "The ManagedFd is opened with writeOnly (for write zero) and readOnly for (verify).\nAnd this design allows the calling code to open the file and specify. This declaration matches the patternWrite, and patternVerify design.\n\nLet me know if you want me to change it.",
      "parentUuid": "57776604_f06bfbfa",
      "range": {
        "startLine": 26,
        "startChar": 39,
        "endLine": 26,
        "endChar": 48
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28fcf3b4_442834ac",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-01-12T04:22:29Z",
      "side": 1,
      "message": "This block size seems to be the same as the other one I reviewed. Is this common - should be extracted out to a header?",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 34
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57d3b7ae_b77ec5a1",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-01-12T04:22:29Z",
      "side": 1,
      "message": "nit: blockSize",
      "range": {
        "startLine": 13,
        "startChar": 17,
        "endLine": 13,
        "endChar": 26
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88038113_1d52607f",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-01-13T01:10:02Z",
      "side": 1,
      "message": "done",
      "parentUuid": "57d3b7ae_b77ec5a1",
      "range": {
        "startLine": 13,
        "startChar": 17,
        "endLine": 13,
        "endChar": 26
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c64152aa_9295a5a7",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-01-12T04:22:29Z",
      "side": 1,
      "message": "nit: Should this be const std::array with const std::byte since we don\u0027t want the value of 0s to change?\n\nIf so, maybe we can move it to the header as a static member and use it for memcmp below? (more explanation below - but this is probably optional)",
      "range": {
        "startLine": 22,
        "startChar": 5,
        "endLine": 22,
        "endChar": 52
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b8af8dc_7d454668",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-01-13T01:10:02Z",
      "side": 1,
      "message": "added it the header, just found out static members can\u0027t be const.",
      "parentUuid": "c64152aa_9295a5a7",
      "range": {
        "startLine": 22,
        "startChar": 5,
        "endLine": 22,
        "endChar": 52
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1acf2032_59a81812",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-01-12T04:22:29Z",
      "side": 1,
      "message": "I was thinking maybe there\u0027s a clever way to do a quick comparison for all 0s but I couldn\u0027t find one\n\nOne thing I could think of is doing a memcmp with a blockOfZeros in case it\u0027s readily available (comment above) - but I actually don\u0027t know if it\u0027s any faster / less resource intensive and I do like this because it\u0027s easier to read and understand. Let me know what you think, this is more of a weak suggestion",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 67,
        "endChar": 0
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afec5b2c_63e155f4",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-01-13T01:10:02Z",
      "side": 1,
      "message": "memcmp should be faster, because it igors the types, and will comapare 64 bits at a time. However most time is spent in the read/read call. I just test this and it is not any faster (new 5m46.966s) (original 5m46.920s)\n\nIdeas to make this faster.\n\n1) adjust the block blocksSize, to find an optimum value. I changed this value to 32768, and the timing stayed the same.\n\n2) We could mmap the part of the drive to ram. This is a different set of kernel systems calls. Which will require one less kernel copy then read/read. I will try this next and report back",
      "parentUuid": "1acf2032_59a81812",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 67,
        "endChar": 0
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17484847_9da57c38",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-01-13T04:10:43Z",
      "side": 1,
      "message": "I tested the mmap code and it is slower\n\n`            void* map \u003d ::mmap(NULL, writeSize, PROT_WRITE, MAP_SHARED,\n                               fd.get(), currentIndex);\n            memset(map, 0, writeSize);\n            munmap(map, writeSize);\n`",
      "parentUuid": "afec5b2c_63e155f4",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 67,
        "endChar": 0
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc22f43a_6a793e37",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-01-13T22:08:26Z",
      "side": 1,
      "message": "I guess if we can\u0027t make this faster, we may need to consider making this call asynchronous or doing chunked calls instead.",
      "parentUuid": "17484847_9da57c38",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 67,
        "endChar": 0
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5033d801_c6a34588",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-01-13T22:26:50Z",
      "side": 1,
      "message": "chunked calls does not sounds good to me. Making a call that would zero 32768 bytes starting at a specified address, sounds like trouble.  \n\nI think asynchronous is going to be the way to go. What/where should I look for best practices when setting up a asynchronous dbus method. (Lambdas like bmcweb?) \n\nAlso, pattern write, and verify have similar time issues, I will convert them also.",
      "parentUuid": "fc22f43a_6a793e37",
      "range": {
        "startLine": 63,
        "startChar": 0,
        "endLine": 67,
        "endChar": 0
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5049b733_ec9e7659",
        "filename": "src/test/erase/zero_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-01-12T01:21:37Z",
      "side": 1,
      "message": "Is this necessary? Could you just use ManagedFd directly?",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 27,
        "endChar": 2
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ca47d57_238b7396",
        "filename": "src/test/erase/zero_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-01-13T01:10:02Z",
      "side": 1,
      "message": "The managedFd is smart and prevents you from manually setting the raw fd (which is what I need to do), so I needed a modify a private member variable at construction.",
      "parentUuid": "5049b733_ec9e7659",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 27,
        "endChar": 2
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8bef219_18ce5280",
        "filename": "src/test/erase/zero_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-01-12T04:22:29Z",
      "side": 1,
      "message": "minor nit: I guess you don\u0027t need Test suffix since this is already the test?",
      "range": {
        "startLine": 29,
        "startChar": 9,
        "endLine": 29,
        "endChar": 13
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f02a1a25_94205c91",
        "filename": "src/test/erase/zero_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-01-12T01:21:37Z",
      "side": 1,
      "message": "spelling",
      "range": {
        "startLine": 47,
        "startChar": 15,
        "endLine": 47,
        "endChar": 27
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2841017a_48e9471e",
        "filename": "src/test/erase/zero_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-01-13T01:10:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f02a1a25_94205c91",
      "range": {
        "startLine": 47,
        "startChar": 15,
        "endLine": 47,
        "endChar": 27
      },
      "revId": "a021dd84cb8ef8694b0a198f4554a902c4bfaf06",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}