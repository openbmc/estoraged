{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0bd57074_b9de6310",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-15T01:55:10Z",
      "side": 1,
      "message": "Let me know if anything needs attention. ",
      "revId": "8a23009c3b9e2458c8705d14836e833035585f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bd85f3f_5808ed1c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-15T17:02:23Z",
      "side": 1,
      "message": "Thanks for looking this over",
      "revId": "8a23009c3b9e2458c8705d14836e833035585f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05690869_50232543",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 20
      },
      "lineNbr": 49,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-04-15T03:39:14Z",
      "side": 1,
      "message": "I would think the previous way of sleeping after checking for maxRetry would be better since we don\u0027t have to sleep before we eventually throw - what was the rationale for moving it up here?",
      "range": {
        "startLine": 46,
        "startChar": 15,
        "endLine": 49,
        "endChar": 17
      },
      "revId": "8a23009c3b9e2458c8705d14836e833035585f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbbf5acf_ed9a2ed6",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 20
      },
      "lineNbr": 49,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-15T17:02:23Z",
      "side": 1,
      "message": "the original way made the thread sleep even when the first write worked.\nThis made the thread sleep around a 4M times for a duration of 1 milisecond, and that caused a timeout. \n\nSo I added a logic not to sleep in the first read/write. I can move this logic donw after the throw by checking if retry is greater then 1, but I thought that would be more ugly (then comparing to zero).",
      "parentUuid": "05690869_50232543",
      "range": {
        "startLine": 46,
        "startChar": 15,
        "endLine": 49,
        "endChar": 17
      },
      "revId": "8a23009c3b9e2458c8705d14836e833035585f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24bdb390_1597ce0d",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 20
      },
      "lineNbr": 49,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-15T17:48:02Z",
      "side": 1,
      "message": "I changed it to prevent the delay when throwing.",
      "parentUuid": "bbbf5acf_ed9a2ed6",
      "range": {
        "startLine": 46,
        "startChar": 15,
        "endLine": 49,
        "endChar": 17
      },
      "revId": "8a23009c3b9e2458c8705d14836e833035585f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2630f75_be8082b2",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 20
      },
      "lineNbr": 49,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-04-15T18:04:08Z",
      "side": 1,
      "message": "Ah that makes sense. Alternative, I wonder if it\u0027d be cleaner (and logically make it very clear) if we did an `if (written \u003d\u003d writeSize) {break}` check so that we don\u0027t have to go through the retry logic in the first place.\n\nBecause currently, we could actually pass the write on the last retry and it would throw.\n\nThat way, we don\u0027t need this retry check to skip the first try for sleep",
      "parentUuid": "24bdb390_1597ce0d",
      "range": {
        "startLine": 46,
        "startChar": 15,
        "endLine": 49,
        "endChar": 17
      },
      "revId": "8a23009c3b9e2458c8705d14836e833035585f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f50d879_e9fa4f47",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 20
      },
      "lineNbr": 49,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-15T21:19:57Z",
      "side": 1,
      "message": "good call. The break works well here.",
      "parentUuid": "e2630f75_be8082b2",
      "range": {
        "startLine": 46,
        "startChar": 15,
        "endLine": 49,
        "endChar": 17
      },
      "revId": "8a23009c3b9e2458c8705d14836e833035585f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d8c4b8e_36b74a40",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 20
      },
      "lineNbr": 49,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-04-15T21:24:12Z",
      "side": 1,
      "message": "Great! Looks much cleaner, thanks for cleaning up.",
      "parentUuid": "2f50d879_e9fa4f47",
      "range": {
        "startLine": 46,
        "startChar": 15,
        "endLine": 49,
        "endChar": 17
      },
      "revId": "8a23009c3b9e2458c8705d14836e833035585f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bfa50cb_0c1e207e",
        "filename": "src/erase/zero.cpp",
        "patchSetId": 20
      },
      "lineNbr": 49,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-04-15T21:24:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d8c4b8e_36b74a40",
      "range": {
        "startLine": 46,
        "startChar": 15,
        "endLine": 49,
        "endChar": 17
      },
      "revId": "8a23009c3b9e2458c8705d14836e833035585f08",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}