{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "05e54cb2_381531e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2022-04-20T22:06:55Z",
      "side": 1,
      "message": "I\u0027m a little suspicious of the fact that we need a timer + retry logic. It should just set up a match for `xyz.openbmc_project.Configuration.EmmcDevice` and then query existing `xyz.openbmc_project.Configuration.EmmcDevice` once. Any new devices from that point onward would be discovered.",
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "800de2c6_cf507d03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-04-20T22:19:25Z",
      "side": 1,
      "message": "The reason I included the retry logic was because dbus-sensors does it. From my testing, I haven\u0027t seen eStoraged actually do any retries, though. I don\u0027t know why dbus-sensors has the retry logic.\n\nWould you prefer that I just remove the retries?",
      "parentUuid": "05e54cb2_381531e9",
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80d9eb72_4620bc74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "partial review",
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d4e4538_c8b8172a",
        "filename": "include/getConfig.hpp",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "This object inherits from a shared version of itself? I am not familar with this pattern, could you add some context?\n\nThat is interesting",
      "range": {
        "startLine": 30,
        "startChar": 3,
        "endLine": 31,
        "endChar": 1
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "636e94a7_803187e7",
        "filename": "include/getConfig.hpp",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "Should be private? only used by class",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 77,
        "endChar": 59
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdba4975_5eefd7d8",
        "filename": "include/getConfig.hpp",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-04-21T17:23:27Z",
      "side": 1,
      "message": "I changed this to make the callback private, but the others still need to be public, since they are accessed via the \"self\" shared pointer.",
      "parentUuid": "636e94a7_803187e7",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 77,
        "endChar": 59
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1327b5a_2915d4e1",
        "filename": "src/getConfig.cpp",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "why are you doing this?\n\nThis creates another copy of your shared object, but your orignal shared object ownership should be enough. It is not clear to me that this function needs to own it\u0027s own version of \"this\".\n\nWhy can\u0027t you just use \"this\" for every place you use \"self\".",
      "range": {
        "startLine": 33,
        "startChar": 52,
        "endLine": 33,
        "endChar": 68
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98f61a56_1b4e8755",
        "filename": "src/getConfig.cpp",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-04-21T17:23:27Z",
      "side": 1,
      "message": "This is how it\u0027s done in dbus-sensors. The intent is to protect against the possibility of the GetStorageConfiguration object getting destroyed before the callback runs. Since the callback runs later after the async_method_call, it\u0027s entirely possible for the GetStorageConfiguration object to get destroyed earlier.",
      "parentUuid": "a1327b5a_2915d4e1",
      "range": {
        "startLine": 33,
        "startChar": 52,
        "endLine": 33,
        "endChar": 68
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "934cf914_3bdbdf3c",
        "filename": "src/getConfig.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "your retries might have stack issues.\n\nAbout how many retries before stacks size is greater then 4k?",
      "range": {
        "startLine": 76,
        "startChar": 30,
        "endLine": 76,
        "endChar": 46
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6217020_b968d05a",
        "filename": "src/getConfig.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-04-21T17:23:27Z",
      "side": 1,
      "message": "A similar question came up in this past review: https://gerrit.openbmc-project.xyz/c/openbmc/dbus-sensors/+/35336/5..9/include/Utils.hpp#b173\n\nBut there\u0027s a chance I\u0027ll just remove the retries. I\u0027m trying to figure out why they exist in dbus-sensors.",
      "parentUuid": "934cf914_3bdbdf3c",
      "range": {
        "startLine": 76,
        "startChar": 30,
        "endLine": 76,
        "endChar": 46
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efadefe6_e4c9be7c",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "makes sense for multi storage system.",
      "range": {
        "startLine": 54,
        "startChar": 12,
        "endLine": 54,
        "endChar": 15
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9497a812_f892c2a2",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "NIT:\nget ride of temporary that is only used once. Or use string_view\u0026",
      "range": {
        "startLine": 57,
        "startChar": 13,
        "endLine": 59,
        "endChar": 0
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07d532e5_d65dd4b5",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-04-21T17:23:27Z",
      "side": 1,
      "message": "I changed it to \"const std::string\u0026\", which I think should accomplish the same thing. I just want an alias to the string that already exists.",
      "parentUuid": "9497a812_f892c2a2",
      "range": {
        "startLine": 57,
        "startChar": 13,
        "endLine": 59,
        "endChar": 0
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36a98dbc_235e76a4",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "NIT:\nget ride of temporary that is only used once. Or use string_view\u0026",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 70,
        "endChar": 61
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de3118b5_dd201e07",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-04-21T17:23:27Z",
      "side": 1,
      "message": "I changed it to \"const estoraged::StorageData\u0026\".",
      "parentUuid": "36a98dbc_235e76a4",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 70,
        "endChar": 61
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c55a1e5f_bcb06115",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "should be a constexpr, unless you think in the future systems storage devices will not be linux block devices.",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 64
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8dcc40d_482fb76d",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-04-21T17:23:27Z",
      "side": 1,
      "message": "I changed it to const. constexpr didn\u0027t work because it complained about it not being a literal.",
      "parentUuid": "c55a1e5f_bcb06115",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 64
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c70c6750_94cc2e5d",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "not required, first std::filesystem::path should natviely string cast. \n\nNext the findSizeOfBlockDevice should be updated to take std::filesystem::path \n( I can do that)",
      "range": {
        "startLine": 93,
        "startChar": 70,
        "endLine": 93,
        "endChar": 76
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf0fc33f_c617d613",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-04-21T17:23:27Z",
      "side": 1,
      "message": "Interesting, I thought I had to explicitly convert this. Done.",
      "parentUuid": "c70c6750_94cc2e5d",
      "range": {
        "startLine": 93,
        "startChar": 70,
        "endLine": 93,
        "endChar": 76
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5068e92e_a02801b6",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "same as above",
      "range": {
        "startLine": 100,
        "startChar": 45,
        "endLine": 100,
        "endChar": 53
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5190ef2_8363369b",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-04-21T17:23:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5068e92e_a02801b6",
      "range": {
        "startLine": 100,
        "startChar": 45,
        "endLine": 100,
        "endChar": 53
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49899551_860a1068",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "I see that you plan to support multiple storage devices, but currently we don\u0027t.\n\nI would rather either support multiple storage devices, or not support them, rather then a skeleton that partially supports it.\n\nI would get feedback from other reviewers/approves before you do a major refactor.",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 122,
        "endChar": 27
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e6988d6_9c20c311",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-04-21T17:23:27Z",
      "side": 1,
      "message": "Yeah, as you can see, I was trying to structure things to be easily scalable.\n\nBut I also don\u0027t think it makes much of a difference either way. For example, currently createStorageObjects() has a for loop which is going iterate either 0 times or once. Alternatively, we could remove the for loop and add a check at the beginning to see if there\u0027s 0 config objects before processing the config object.",
      "parentUuid": "49899551_860a1068",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 122,
        "endChar": 27
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "295da7ec_b1b81a18",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 152,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "we should log if we get canceled",
      "range": {
        "startLine": 152,
        "startChar": 0,
        "endLine": 152,
        "endChar": 50
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a21c67ee_35386e43",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 152,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-04-21T17:23:27Z",
      "side": 1,
      "message": "This is similar to what dbus-sensors does. I think it intentionally didn\u0027t log anything here, in case there\u0027s a bunch of new config objects that show up within a short period of time, in which case we might cancel the timer multiple times in a row. But on the other hand, eStoraged is not expecting a bunch of config objects, so I\u0027m not sure if I should just remove the timer logic.",
      "parentUuid": "295da7ec_b1b81a18",
      "range": {
        "startLine": 152,
        "startChar": 0,
        "endLine": 152,
        "endChar": 50
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb160e3d_099a13f2",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 165,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-04-20T23:02:06Z",
      "side": 1,
      "message": "why do you make this match?\n\nI am not very familiar with them",
      "range": {
        "startLine": 165,
        "startChar": 13,
        "endLine": 165,
        "endChar": 18
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5654794f_9ff6f8a1",
        "filename": "src/main.cpp",
        "patchSetId": 4
      },
      "lineNbr": 165,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-04-21T17:23:27Z",
      "side": 1,
      "message": "The purpose of this is to monitor the bus for any new config objects. So, if the config object isn\u0027t ready when eStoraged starts up, we will still see it show up later. From my testing, I can see that this is actually being used.",
      "parentUuid": "eb160e3d_099a13f2",
      "range": {
        "startLine": 165,
        "startChar": 13,
        "endLine": 165,
        "endChar": 18
      },
      "revId": "90be9b338b34579e195bf1be2d7f548e7199e153",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}