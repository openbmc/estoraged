{
  "comments": [
    {
      "key": {
        "uuid": "f0712518_8f0c5466",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 13,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-24T22:16:54Z",
      "side": 1,
      "message": "How much is \"some time\"? D-Bus timeout I believe is at 40 seconds for reference.",
      "range": {
        "startLine": 13,
        "startChar": 58,
        "endLine": 13,
        "endChar": 68
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78c4748e_21b41d2e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 13,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-29T19:47:42Z",
      "side": 1,
      "message": "I changed the commit message to say that it took about 20 seconds.\n\nI think the default timeout is actually 25 seconds, and one time I hit the timeout while testing this.",
      "parentUuid": "f0712518_8f0c5466",
      "range": {
        "startLine": 13,
        "startChar": 58,
        "endLine": 13,
        "endChar": 68
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d82f90a0_70390589",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 13,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-01T19:27:37Z",
      "side": 1,
      "message": "Hmm.. 20 seconds blocking call is not great, as the BMC may be VERY busy (firmware update for instance) and the 20 seconds may extend to 30-40 seconds. I would suggest asynchronous call here if possible - this can be tackled in an upcoming CL",
      "parentUuid": "78c4748e_21b41d2e",
      "range": {
        "startLine": 13,
        "startChar": 58,
        "endLine": 13,
        "endChar": 68
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c88e75f3_a51894ad",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-24T01:46:48Z",
      "side": 1,
      "message": "I understand your member variable is being initialized by your parameter of the same name (containerName). And it will work, but this shadowing is a bad practice",
      "range": {
        "startLine": 29,
        "startChar": 26,
        "endLine": 29,
        "endChar": 54
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "884dc39f_6d9af3fc",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-24T22:16:54Z",
      "side": 1,
      "message": "I wasn\u0027t aware that this was a bad practice - would you be able to point to some references for my learning?\n\nIn this case, we\u0027re not referencing the parameter in the constructor and just using it within the member initialization list so i believe it\u0027s stylistic and I personally prefer it because it avoids having to create another variable name (that won\u0027t be used).",
      "parentUuid": "c88e75f3_a51894ad",
      "range": {
        "startLine": 29,
        "startChar": 26,
        "endLine": 29,
        "endChar": 54
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f292506_0889fd59",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-29T18:19:21Z",
      "side": 1,
      "message": "OpenBmc style guide follows the \"C++ Core Guidelines (CCG).\"\nhttps://github.com/openbmc/docs/blob/master/cpp-style-and-conventions.md#global-guidelines-and-practices\n\nand the CCG has guidance on reusing variable names. https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es12-do-not-reuse-names-in-nested-scopes\n\nTwo different names make sense because there are two different variables. (a parameter and member variable)\n\nIf Brandon is good with it, I am good with it.\n(resolved from my side)",
      "parentUuid": "884dc39f_6d9af3fc",
      "range": {
        "startLine": 29,
        "startChar": 26,
        "endLine": 29,
        "endChar": 54
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6eceac9_400c4c2b",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-01T19:27:37Z",
      "side": 1,
      "message": "I think the member initialization list is treated a little differently (especially in the case where we\u0027re just passing in the parameter for assignment and not using the parameter variable). I do think this is more stylistic and the best of both worlds is to use Google\u0027s convention of adding _ to denote member variable.\n\nAnyway, some links I found that show that this is valid (which we know) and is explicitly written in the standard (which, maybe points to this not being a discouraged practice):\n\nhttps://stackoverflow.com/questions/6185020/initializing-member-variables-using-the-same-name-for-constructor-arguments-as-f\n\nhttp://eel.is/c++draft/class.base.init#15",
      "parentUuid": "2f292506_0889fd59",
      "range": {
        "startLine": 29,
        "startChar": 26,
        "endLine": 29,
        "endChar": 54
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb0c5bef_73519ba7",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-24T22:16:54Z",
      "side": 1,
      "message": "nit: param doxygens",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 87,
        "endChar": 0
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1f190ea_2e569e43",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-29T19:47:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cb0c5bef_73519ba7",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 87,
        "endChar": 0
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "290ea912_282de87e",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-24T01:46:48Z",
      "side": 1,
      "message": "so there will be an class that inherits and overrides?",
      "range": {
        "startLine": 110,
        "startChar": 4,
        "endLine": 110,
        "endChar": 11
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3231662_370c8f54",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-24T22:16:54Z",
      "side": 1,
      "message": "It sounds like it\u0027s just a wrapper so I would believe so.\n\nWould it make sense to have the wrappers be a separate class (for possibly easier mocking?)\n\nEdit: Saw the discussion you had with Willy regarding this - didn\u0027t know gTest allowed mocking of private virtual functions TIL. It does seem like the testing is clean written this way. I wonder if others have thoughts on whether we should have a different class just for these wrappers (which is how I usually implement).",
      "parentUuid": "290ea912_282de87e",
      "range": {
        "startLine": 110,
        "startChar": 4,
        "endLine": 110,
        "endChar": 11
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c55c8633_a2c18c34",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-29T18:19:21Z",
      "side": 1,
      "message": "I saw the testing. Questions are answered.\n(resolved from my side)",
      "parentUuid": "a3231662_370c8f54",
      "range": {
        "startLine": 110,
        "startChar": 4,
        "endLine": 110,
        "endChar": 11
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8038f4c1_767f5922",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-29T19:47:42Z",
      "side": 1,
      "message": "I\u0027m relatively new to gTest, so I\u0027m not sure how things are typically done. But it might be nice to de-clutter the estoraged class by moving the wrappers to a separate class (or even a couple different classes). For example, maybe we could have one class for the libcryptsetup wrappers and another for the filesystem-related operations, e.g. mount, unmount, createFilesytem.",
      "parentUuid": "a3231662_370c8f54",
      "range": {
        "startLine": 110,
        "startChar": 4,
        "endLine": 110,
        "endChar": 11
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f51c8e0e_2d34db48",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 110,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-01T19:27:37Z",
      "side": 1,
      "message": "That\u0027s what I\u0027ve seen done before but fragmenting everything too much, does lead to having to pass in those wrapper interface (for mocking purposes) into each classes that need it. For these ones though, I do think I prefer having a separate wrapper class. Maybe William can comment",
      "parentUuid": "8038f4c1_767f5922",
      "range": {
        "startLine": 110,
        "startChar": 4,
        "endLine": 110,
        "endChar": 11
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a2ae41e_8a065948",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 113,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-24T22:16:54Z",
      "side": 1,
      "message": "I guess we\u0027re now using snake case here but I\u0027m guessing it\u0027s because of libcryptsetup.h?",
      "range": {
        "startLine": 113,
        "startChar": 35,
        "endLine": 113,
        "endChar": 50
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e6d8aeb_77148813",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 113,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-29T19:47:42Z",
      "side": 1,
      "message": "I had copy-pasted the arguments from libcryptsetup and forgot to change it to camelCase. I did it now.",
      "parentUuid": "6a2ae41e_8a065948",
      "range": {
        "startLine": 113,
        "startChar": 35,
        "endLine": 113,
        "endChar": 50
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8096c1ca_8a5b5f4c",
        "filename": "include/estoraged.hpp",
        "patchSetId": 6
      },
      "lineNbr": 160,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-24T22:16:54Z",
      "side": 1,
      "message": "Technically we should have param doxygen here as well - even though I\u0027m assuming we\u0027re just going to pass them in directly since these are just wrappers.",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 160,
        "endChar": 43
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2cc0a7b_b7c091f2",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-24T22:16:54Z",
      "side": 1,
      "message": "nit: technically don\u0027t need this since we have the comment in the header",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 78,
        "endChar": 3
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8973390_e144d8c3",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-29T19:47:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2cc0a7b_b7c091f2",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 78,
        "endChar": 3
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fee35fa6_c479dd56",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-24T22:16:54Z",
      "side": 1,
      "message": "nit: magic number - maybe we can declare this as a constant or have /* volume_key_size */ here and explain where this came from?",
      "range": {
        "startLine": 106,
        "startChar": 25,
        "endLine": 106,
        "endChar": 32
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffd26838_cd33e216",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-29T19:47:42Z",
      "side": 1,
      "message": "This argument should really be volumeKey.size(). I changed it accordingly.",
      "parentUuid": "fee35fa6_c479dd56",
      "range": {
        "startLine": 106,
        "startChar": 25,
        "endLine": 106,
        "endChar": 32
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1382ca3_3ca38dbc",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 141,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-24T22:16:54Z",
      "side": 1,
      "message": "nit: same here?",
      "range": {
        "startLine": 140,
        "startChar": 0,
        "endLine": 141,
        "endChar": 3
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8f188c3_9726d1e8",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 141,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-29T19:47:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1382ca3_3ca38dbc",
      "range": {
        "startLine": 140,
        "startChar": 0,
        "endLine": 141,
        "endChar": 3
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aea52f60_81b2ffe4",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 195,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-24T01:46:48Z",
      "side": 1,
      "message": "see above",
      "range": {
        "startLine": 195,
        "startChar": 17,
        "endLine": 195,
        "endChar": 27
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00d1dbdb_2f1dc78a",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 211,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-24T01:46:48Z",
      "side": 1,
      "message": "The mount point does not need to appear and reappear.",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 211,
        "endChar": 70
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd73b19f_c5ba6069",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 221,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-24T01:46:48Z",
      "side": 1,
      "message": "see above",
      "range": {
        "startLine": 221,
        "startChar": 17,
        "endLine": 221,
        "endChar": 27
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "398b8140_7a7b78d5",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-24T01:46:48Z",
      "side": 1,
      "message": "This is unexpected (for me), I would think if mount failed. EstorageD would log an error and stop.",
      "range": {
        "startLine": 229,
        "startChar": 12,
        "endLine": 229,
        "endChar": 27
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fb8d288_b9c5afac",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-24T22:16:54Z",
      "side": 1,
      "message": "I think we should revisit this once you start using the the mount library - I also would imagine if mount failed, we can\u0027t unmount (since it didn\u0027t mount in the first place).",
      "parentUuid": "398b8140_7a7b78d5",
      "range": {
        "startLine": 229,
        "startChar": 12,
        "endLine": 229,
        "endChar": 27
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f05d94b_9a0411e8",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-29T19:47:42Z",
      "side": 1,
      "message": "Strictly speaking, this isn\u0027t unmounting; it\u0027s just removing the directory we created several lines up.\n\nWhen I wrote this, I thought it would be a good idea to remove the directory we created, once we don\u0027t need it anymore. But I can change this if people prefer.",
      "parentUuid": "2fb8d288_b9c5afac",
      "range": {
        "startLine": 229,
        "startChar": 12,
        "endLine": 229,
        "endChar": 27
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82bc79b4_ef669e32",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-01T19:27:37Z",
      "side": 1,
      "message": "I think this is fine.",
      "parentUuid": "8f05d94b_9a0411e8",
      "range": {
        "startLine": 229,
        "startChar": 12,
        "endLine": 229,
        "endChar": 27
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db971e16_7801bacd",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 256,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-24T01:46:48Z",
      "side": 1,
      "message": "see above (you don\u0027t have to do this)",
      "range": {
        "startLine": 256,
        "startChar": 0,
        "endLine": 256,
        "endChar": 70
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "187cf9cc_0960eb04",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 343,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-24T01:46:48Z",
      "side": 1,
      "message": "system almost never done.\n\nfor mount think about using:\n#include \u003csys/mount.h\u003e\n  int mount(const char *source, const char *target,\n                 const char *filesystemtype, unsigned long mountflags,\n                 const void *data);\n\nFor creating the ext4 ext2fs_initialize is the c way, but it look like it might take some effort. \nhttps://kernel.googlesource.com/pub/scm/linux/kernel/git/davem/silo/+/eb6151388752b52804f80ff27e90ec2dbde71339/include/ext2fs/ext2fs.h#726\n\nI would see what the +2\u0027s want, before burning cycles on it.\n\nexample:\nhttps://github.com/tytso/e2fsprogs/blob/master/misc/mke2fs.c#L3078",
      "range": {
        "startLine": 343,
        "startChar": 0,
        "endLine": 343,
        "endChar": 35
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e03a7df3_b5a16bd3",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 343,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-24T19:20:49Z",
      "side": 1,
      "message": "For mounting and unmounting, it certainly makes sense to use the C function. Earlier, I guess I didn\u0027t realize it would be that simple.\n\nFor creating the filesystem, I haven\u0027t looked into it extensively, but it seems like a non-trivial task. And FWIW, udisks2 uses mkfs, as well. Here is where it lists out the different commands for creating different filesystem types: https://github.com/storaged-project/udisks/blob/d7b231263d6b3b0d2def6c974fe651a0538ac5d3/src/udiskslinuxfsinfo.c#L67\n\nAlso keep in mind that the new eStoraged interface (still in review) will allow for the client to specify filesystem type, so it could be difficult to support that without using mkfs. https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/48636",
      "parentUuid": "187cf9cc_0960eb04",
      "range": {
        "startLine": 343,
        "startChar": 0,
        "endLine": 343,
        "endChar": 35
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ac31677_9f8102c7",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 343,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-24T22:16:54Z",
      "side": 1,
      "message": "Agreed that we should use the mounting library.\n\nRegarding filesystem, I\u0027m unfortunately not familiar enough - hopefully William can be the tiebreaker here. My 2 cents is that I don\u0027t think using system call is too common within OpenBMC (at least in the repos I\u0027ve touched) so my gut says we should try to use the libraries like the one that John Broadbent suggested - but I also see where the difficulties of supporting different types of file systems will come in.",
      "parentUuid": "e03a7df3_b5a16bd3",
      "range": {
        "startLine": 343,
        "startChar": 0,
        "endLine": 343,
        "endChar": 35
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a10f41d_992bb6be",
        "filename": "src/estoraged.cpp",
        "patchSetId": 6
      },
      "lineNbr": 343,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-12-01T19:27:37Z",
      "side": 1,
      "message": "I think William chimed in regarding filesystem (offline) that this is unfortunately what we\u0027ll have to do. Maybe we can resolve since mount is now using the correct library as pointed out by jebr@?",
      "parentUuid": "4ac31677_9f8102c7",
      "range": {
        "startLine": 343,
        "startChar": 0,
        "endLine": 343,
        "endChar": 35
      },
      "revId": "a9fdd8044647a9e259f426f22d3d0d2f676cbc21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}