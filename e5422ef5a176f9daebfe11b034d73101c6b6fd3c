{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4ff898d2_f0126fbe",
        "filename": ".clang-tidy",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-02-23T17:22:29Z",
      "side": 1,
      "message": "Why did you comment this out? Do you plan to enable it later?",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 31
      },
      "revId": "e5422ef5a176f9daebfe11b034d73101c6b6fd3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "260906d2_8d474d45",
        "filename": ".clang-tidy",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-02-23T18:05:44Z",
      "side": 1,
      "message": "We use macros, defined by a meson generated file. \nWe should fix this, but I wanted to limit the invasive of this one change",
      "parentUuid": "4ff898d2_f0126fbe",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 31
      },
      "revId": "e5422ef5a176f9daebfe11b034d73101c6b6fd3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "275c1318_dcb178ed",
        "filename": ".clang-tidy",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-02-23T18:35:32Z",
      "side": 1,
      "message": "You\u0027re referring to estoraged_conf.hpp, right? That file is listed in clang-ignore. Does clang-tidy still complain even with clang-ignore?",
      "parentUuid": "260906d2_8d474d45",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 31
      },
      "revId": "e5422ef5a176f9daebfe11b034d73101c6b6fd3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1281737_d20af483",
        "filename": ".clang-tidy",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-02-23T18:53:20Z",
      "side": 1,
      "message": "yes, it creates the error when the defines are used.",
      "parentUuid": "275c1318_dcb178ed",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 31
      },
      "revId": "e5422ef5a176f9daebfe11b034d73101c6b6fd3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62d930ea_21227354",
        "filename": ".clang-tidy",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-02-23T19:53:54Z",
      "side": 1,
      "message": "Could we put a TODO comment here to get rid of this in the future?\n\nOtherwise, could it be that meson seems to use .clang-format-ignore file? https://mesonbuild.com/Code-formatting.html",
      "parentUuid": "c1281737_d20af483",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 31
      },
      "revId": "e5422ef5a176f9daebfe11b034d73101c6b6fd3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6765e5cc_9ffc1f2a",
        "filename": ".clang-tidy",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-24T03:30:33Z",
      "side": 1,
      "message": "i don\u0027t think clang-tidy supports a ignore file.\n\nWith that said, that\u0027s the wrong solution, if we have macros that we know we want to clean up, but maybe can\u0027t right now, we should be adding a\n\ncppcoreguidelines-macro-usage.AllowedRegexp to the clang-tidy file, so we don\u0027t totally disable the check.  Something similar in your file to this in dbus-sensors:\n\nhttps://github.com/openbmc/dbus-sensors/blob/5cf66dfc62ccf0c2648ad0f8c3fdf2673751a579/.clang-tidy#L261\n\nWith that said, I\u0027m totally fine with this commit taking an incremental approach to turning checks on, but the AllowedRegexp should be in a much closer change than actually removing the macros.",
      "parentUuid": "62d930ea_21227354",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 31
      },
      "revId": "e5422ef5a176f9daebfe11b034d73101c6b6fd3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1696fb9f_27042ae7",
        "filename": ".clang-tidy",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-24T03:34:40Z",
      "side": 1,
      "message": "Also, take a look at how we solved this in bmcweb.  Basically you template the file and use set10 instead of set, and you can generate to typesafe stuff.\n\nAnother thing to keep in mind, if you comment out one line in this file, in practice, it looks like it\u0027s commenting out the rest of the tests, because there\u0027s for sure things that should\u0027ve failed in this.",
      "parentUuid": "6765e5cc_9ffc1f2a",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 209,
        "endChar": 31
      },
      "revId": "e5422ef5a176f9daebfe11b034d73101c6b6fd3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5bee5c3_87d53645",
        "filename": "src/test/estoraged_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-02-23T17:22:29Z",
      "side": 1,
      "message": "Is there a reason why these aren\u0027t part the class anymore?",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 55
      },
      "revId": "e5422ef5a176f9daebfe11b034d73101c6b6fd3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e933e825_b25cf620",
        "filename": "src/test/estoraged_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-02-23T18:05:44Z",
      "side": 1,
      "message": "clang-tidy gave me an error.\nIt told me not use arrays of chars, but use std::arrays.\nI did not want to do that, so I switched to strings, but they had to be moved out side the class.",
      "parentUuid": "e5bee5c3_87d53645",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 55
      },
      "revId": "e5422ef5a176f9daebfe11b034d73101c6b6fd3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "290d3d3d_5e61e034",
        "filename": "src/test/estoraged_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2022-02-23T18:35:32Z",
      "side": 1,
      "message": "Okay, why did the strings need to be moved? Does \"static constexpr std::string\" not work? You might need to use \"static constexpr std::string_view\".",
      "parentUuid": "e933e825_b25cf620",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 55
      },
      "revId": "e5422ef5a176f9daebfe11b034d73101c6b6fd3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76b962ed_64b6c5f5",
        "filename": "src/test/estoraged_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-02-23T18:53:20Z",
      "side": 1,
      "message": "it look like auto uses const char * for strings.",
      "parentUuid": "290d3d3d_5e61e034",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 55
      },
      "revId": "e5422ef5a176f9daebfe11b034d73101c6b6fd3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aba0aae8_bb198058",
        "filename": "src/test/estoraged_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2022-02-24T03:30:33Z",
      "side": 1,
      "message": "Technically these std::string declarations would also fail the https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html check had we turned it on, because std::string has to construct before main, and could throw before main.\n\nauto works (although I\u0027m a firm believe that it makes code harder to read and debug).  Explicitly declaring these constexpr char * would also be another solution.",
      "parentUuid": "76b962ed_64b6c5f5",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 55
      },
      "revId": "e5422ef5a176f9daebfe11b034d73101c6b6fd3c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}