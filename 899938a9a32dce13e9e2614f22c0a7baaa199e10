{
  "comments": [
    {
      "key": {
        "uuid": "ea9fb4ef_97950002",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-17T18:07:31Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 7,
        "startChar": 5,
        "endLine": 7,
        "endChar": 11
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e7a2d91_b5bdd087",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-19T00:28:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea9fb4ef_97950002",
      "range": {
        "startLine": 7,
        "startChar": 5,
        "endLine": 7,
        "endChar": 11
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35ef444_b390a866",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-17T18:07:31Z",
      "side": 1,
      "message": "fix",
      "range": {
        "startLine": 9,
        "startChar": 23,
        "endLine": 9,
        "endChar": 36
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "073830e1_c6e8949c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-19T00:28:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a35ef444_b390a866",
      "range": {
        "startLine": 9,
        "startChar": 23,
        "endLine": 9,
        "endChar": 36
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa94a88_76e47f03",
        "filename": "include/erase.hpp",
        "patchSetId": 6
      },
      "lineNbr": 3,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-19T01:39:08Z",
      "side": 1,
      "message": "Class names should be upper camelcase https://github.com/openbmc/docs/blob/master/cpp-style-and-conventions.md#naming-conventions",
      "range": {
        "startLine": 3,
        "startChar": 6,
        "endLine": 3,
        "endChar": 11
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49a139f6_8bb416f9",
        "filename": "include/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-17T18:36:29Z",
      "side": 1,
      "message": "What if there are multiple storage devices of different sizes?\n\nThe minimum geometry could maybe be in the form of a percentage, if we want that to be a build option applicable to all the devices. But maybe the device size could be an argument to eStoraged?",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 6,
        "endChar": 69
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc819999_1b5faf4a",
        "filename": "include/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-17T20:57:59Z",
      "side": 1,
      "message": "\u003e What if there are multiple storage devices of different sizes?\nRecipes can override build options. Currently the plan is to have multiple instances of estoraged for the mutli eMMC case. So this is could be dealt with in the recipe.\n\n\u003e The minimum geometry could maybe be in the form of a percentage, if we want that to be a build option applicable to all the devices. \n\nI suppose I would have to have expected size, percent above, percent below. \nWith out the expected size I would be unable to detrimen if the current size is in range.\n\n\u003e But maybe the device size could be an argument to eStoraged?\nMaybe, we could also provide it in configuration files (set up by the recipe) that estoraged reads in this step. There are several fine approaches. \n\nMy understanding is the size of the drives can not be shared in this publicly.",
      "parentUuid": "49a139f6_8bb416f9",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 6,
        "endChar": 69
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02fb55e6_59472e4f",
        "filename": "include/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-18T17:09:11Z",
      "side": 1,
      "message": "Something like a config file would give us the flexibility to specify different sizes for different devices. But since we don\u0027t have any immediate plans to use this with multiple storage devices, maybe we can set that up later, if and when it\u0027s needed.",
      "parentUuid": "cc819999_1b5faf4a",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 6,
        "endChar": 69
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09520474_9e72459f",
        "filename": "include/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-19T00:28:00Z",
      "side": 1,
      "message": "I agree. \nI will add a note of our intention to add a config file if the number of storage devices increases",
      "parentUuid": "02fb55e6_59472e4f",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 6,
        "endChar": 69
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04a98046_7abd0795",
        "filename": "include/verifyGeometry.hpp",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-19T01:39:08Z",
      "side": 1,
      "message": "is verify geometry only used during erase?",
      "range": {
        "startLine": 12,
        "startChar": 6,
        "endLine": 12,
        "endChar": 28
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfbfd7d8_8a5bba84",
        "filename": "include/verifyGeometry.hpp",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-19T01:39:08Z",
      "side": 1,
      "message": "Class names should be UpperCamelCase.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 28
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb53e704_f6cfc525",
        "filename": "include/verifyGeometry.hpp",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-19T04:37:27Z",
      "side": 1,
      "message": "I had a to change it to VerifyDriveGeometry to avoid a name collision with the interface VerfyGeometry. \nDone",
      "parentUuid": "cfbfd7d8_8a5bba84",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 28
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6f2a160_3d9f8e94",
        "filename": "include/verifyGeometry.hpp",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-19T04:37:27Z",
      "side": 1,
      "message": "yes (right now). It is part the erase process",
      "parentUuid": "04a98046_7abd0795",
      "range": {
        "startLine": 12,
        "startChar": 6,
        "endLine": 12,
        "endChar": 28
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9ff3b81_edf1eaaa",
        "filename": "meson_options.txt",
        "patchSetId": 6
      },
      "lineNbr": 2,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-18T17:09:11Z",
      "side": 1,
      "message": "This description doesn\u0027t match the option. Same is true with the other option, as well.",
      "range": {
        "startLine": 2,
        "startChar": 112,
        "endLine": 2,
        "endChar": 158
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3669a83c_23276bd0",
        "filename": "meson_options.txt",
        "patchSetId": 6
      },
      "lineNbr": 2,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-19T00:28:00Z",
      "side": 1,
      "message": "done",
      "parentUuid": "c9ff3b81_edf1eaaa",
      "range": {
        "startLine": 2,
        "startChar": 112,
        "endLine": 2,
        "endChar": 158
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f9c6269_2e515a47",
        "filename": "src/erase/findSize.cpp",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-17T18:36:29Z",
      "side": 1,
      "message": "Is there a reason for not making this function a member of the VerifyGeometry class?",
      "range": {
        "startLine": 7,
        "startChar": 11,
        "endLine": 7,
        "endChar": 32
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1513c6f_89513c17",
        "filename": "src/erase/findSize.cpp",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-17T20:57:59Z",
      "side": 1,
      "message": "- It use is not limited to VerifyGeomenty. (Other methods also need to know the size of the device.)\n- It does not need any of the verifyGeometry state to find the size\n- I pass this in as an std::fuction, which can be done for a member function, but that can be unclear. (minor)",
      "parentUuid": "8f9c6269_2e515a47",
      "range": {
        "startLine": 7,
        "startChar": 11,
        "endLine": 7,
        "endChar": 32
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1d01b25_578ddefa",
        "filename": "src/erase/findSize.cpp",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-17T21:22:28Z",
      "side": 1,
      "message": "Does this function only get used in the context of erasing? Could it be part of the erase class?",
      "parentUuid": "a1513c6f_89513c17",
      "range": {
        "startLine": 7,
        "startChar": 11,
        "endLine": 7,
        "endChar": 32
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a140c6e2_c25d68d1",
        "filename": "src/erase/findSize.cpp",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-19T00:28:00Z",
      "side": 1,
      "message": "\u003e Does this function only get used in the context of erasing? \nCurrently it\u0027s only use is in erasing. However, there are sections of the code not yet implemented \n \n\u003e Could it be part of the erase class?\nIt could be part of the erase class. Should it be part of the erase class? I assume that other parts of the estoraged will need this function, or we will save the size of drive in so we don\u0027t have to check multiple times. Eventually it will be moved to the src in it\u0027s own hpp and cpp, and it will populate a value in the estoraged class. But I can\u0027t tell the future (I am barely tell the present;)",
      "parentUuid": "c1d01b25_578ddefa",
      "range": {
        "startLine": 7,
        "startChar": 11,
        "endLine": 7,
        "endChar": 32
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ea53dc9_f4026eda",
        "filename": "src/erase/findSize.cpp",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-19T01:39:08Z",
      "side": 1,
      "message": "I feel uneasy about this being just an extern function with declaration in `include/verifyGeometry.hpp` for some reason (I guess I just don\u0027t see this much?)\n\nI would also find a home for this in a class personally - makes it easier for mocking and testing later. I\u0027d also be curious on how these classes will be tested if defined this way.",
      "parentUuid": "a140c6e2_c25d68d1",
      "range": {
        "startLine": 7,
        "startChar": 11,
        "endLine": 7,
        "endChar": 32
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0307337d_92dabe35",
        "filename": "src/erase/findSize.cpp",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-19T04:37:27Z",
      "side": 1,
      "message": "Sounds good.\nThis function is passed into member function GeometryOkay(std::function, unint_t64)\n\nFor me to pass a member fucntion into another member function will require the use of either std::bind or a lambda, do you have a preference?",
      "parentUuid": "0ea53dc9_f4026eda",
      "range": {
        "startLine": 7,
        "startChar": 11,
        "endLine": 7,
        "endChar": 32
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2143d0c0_a358b4bc",
        "filename": "src/erase/verifyGeometry.cpp",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-17T18:36:29Z",
      "side": 1,
      "message": "Can you add unit tests for verifyGeometry?",
      "range": {
        "startLine": 8,
        "startChar": 4,
        "endLine": 8,
        "endChar": 32
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb35fe5b_5dd1fade",
        "filename": "src/erase/verifyGeometry.cpp",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-17T20:57:59Z",
      "side": 1,
      "message": "There is a separate change here:\nhttps://gerrit.openbmc-project.xyz/c/openbmc/estoraged/+/48608/3\n\nIt is the first unit test of the project, so it has more changes then normal changes.",
      "parentUuid": "2143d0c0_a358b4bc",
      "range": {
        "startLine": 8,
        "startChar": 4,
        "endLine": 8,
        "endChar": 32
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0659560f_6e6edf11",
        "filename": "src/erase/verifyGeometry.cpp",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2021-11-19T01:39:08Z",
      "side": 1,
      "message": "Prefer to squash the 2 commits if possible so that we have a change and the accommodating unit test (so that presubmit will show us that the changes are well tested).",
      "parentUuid": "cb35fe5b_5dd1fade",
      "range": {
        "startLine": 8,
        "startChar": 4,
        "endLine": 8,
        "endChar": 32
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "696889fb_7c44eecd",
        "filename": "src/erase/verifyGeometry.cpp",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-17T21:22:28Z",
      "side": 1,
      "message": "Is this necessary? I thought the purpose of verifyGeometry was simply to check that the logical size is at least a certain percentage of the physical size.",
      "range": {
        "startLine": 15,
        "startChar": 4,
        "endLine": 15,
        "endChar": 35
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c286da4_a269700d",
        "filename": "src/erase/verifyGeometry.cpp",
        "patchSetId": 6
      },
      "lineNbr": 15,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-19T00:28:00Z",
      "side": 1,
      "message": "Other implementations do this check. It does not require us to, but it does make sense to me.",
      "parentUuid": "696889fb_7c44eecd",
      "range": {
        "startLine": 15,
        "startChar": 4,
        "endLine": 15,
        "endChar": 35
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d84c5453_e7d0e9bf",
        "filename": "src/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-17T18:36:29Z",
      "side": 1,
      "message": "There should be a build file in the erase directory.",
      "range": {
        "startLine": 11,
        "startChar": 2,
        "endLine": 12,
        "endChar": 23
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63b5aead_931a5634",
        "filename": "src/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-17T20:57:59Z",
      "side": 1,
      "message": "done?",
      "parentUuid": "d84c5453_e7d0e9bf",
      "range": {
        "startLine": 11,
        "startChar": 2,
        "endLine": 12,
        "endChar": 23
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c57b3b6a_098920c5",
        "filename": "src/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-17T21:22:28Z",
      "side": 1,
      "message": "You should set up a static_library in the new build file under erase/.",
      "parentUuid": "63b5aead_931a5634",
      "range": {
        "startLine": 11,
        "startChar": 2,
        "endLine": 12,
        "endChar": 23
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ac7b1fd_668698a4",
        "filename": "src/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-17T21:36:50Z",
      "side": 1,
      "message": "Can you help me understand why we want a static library for the erase section. \nIs there another application that is going to link against erase?\nOr do we want the binaries to match the subdirectors?\n\nOr maybe there are advantages of static_library, that I am not aware of. \nThank you.",
      "parentUuid": "c57b3b6a_098920c5",
      "range": {
        "startLine": 11,
        "startChar": 2,
        "endLine": 12,
        "endChar": 23
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46e18087_e7c26401",
        "filename": "src/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1001202
      },
      "writtenOn": "2021-11-17T21:54:42Z",
      "side": 1,
      "message": "It\u0027s convention for the build structure to follow the directory structure. So, you would have a library and declare_dependency in the build file under erase/",
      "parentUuid": "6ac7b1fd_668698a4",
      "range": {
        "startLine": 11,
        "startChar": 2,
        "endLine": 12,
        "endChar": 23
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c176664_4425aeb8",
        "filename": "src/meson.build",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2021-11-19T00:28:00Z",
      "side": 1,
      "message": "done, thanks for your help.",
      "parentUuid": "46e18087_e7c26401",
      "range": {
        "startLine": 11,
        "startChar": 2,
        "endLine": 12,
        "endChar": 23
      },
      "revId": "899938a9a32dce13e9e2614f22c0a7baaa199e10",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}